# 智能日程管理助手
## 项目演示

### 1. 项目概述
- 项目名称：智能日程管理助手
- 核心功能：日程管理 + 智能对话
- 技术亮点：基于 Qwen2-1.8B 大语言模型
- 应用场景：企业日程管理、会议安排、智能助手

### 2. 系统架构
```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│   前端界面   │     │   后端服务   │     │  数据库服务  │
│  React + MUI │ <-> │  FastAPI    │ <-> │  MongoDB    │
└─────────────┘     └─────────────┘     └─────────────┘
                           ↑
                    ┌─────────────┐
                    │  Qwen2模型   │
                    │  1.8B参数   │
                    └─────────────┘
```

### 3. 核心功能展示

#### 3.1 日程管理
```typescript
// 创建日程示例
const createEvent = async (event: Event) => {
  const response = await fetch('/api/events', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(event)
  });
  return response.json();
};
```

#### 3.2 智能对话
```python
# 对话处理示例
@app.post("/chat")
async def chat(request: ChatRequest):
    prompt = create_prompt(request.message, request.events)
    response = model.generate(prompt)
    return {"response": response}
```

#### 3.3 会议安排
```typescript
// 会议安排界面
<Dialog open={formOpen}>
  <DialogTitle>安排会议</DialogTitle>
  <DialogContent>
    <TextField label="会议主题" />
    <DateTimePicker label="开始时间" />
    <DateTimePicker label="结束时间" />
    <TextField label="参会人员" />
  </DialogContent>
</Dialog>
```

### 4. 技术实现

#### 4.1 后端技术栈
- Python 3.8+
- FastAPI：高性能 Web 框架
- MongoDB：文档型数据库
- Qwen2-1.8B：轻量级大语言模型
- Transformers：模型加载和推理

#### 4.2 前端技术栈
- React：用户界面框架
- Material-UI：组件库
- TypeScript：类型安全
- Next.js：服务端渲染

### 5. 部署架构
```
┌─────────────────┐
│   用户界面层     │
│  http://localhost:3000
└─────────────────┘
         ↓
┌─────────────────┐
│   应用服务层     │
│  http://localhost:8000
└─────────────────┘
         ↓
┌─────────────────┐
│   数据存储层     │
│  MongoDB Atlas
└─────────────────┘
```

### 6. 项目亮点
1. 智能对话：自然语言处理日程管理
2. 轻量级模型：Qwen2-1.8B 保证性能
3. 响应式设计：支持多端适配
4. 实时更新：WebSocket 保持数据同步
5. 安全可靠：MongoDB Atlas 云数据库

### 7. 未来规划
1. 语音交互：支持语音输入和输出
2. 多语言支持：扩展语言处理能力
3. 智能推荐：基于历史数据推荐日程
4. 移动端适配：开发移动应用
5. 团队协作：支持多人日程管理

### 8. 演示步骤
1. 启动服务
```bash
# 后端
cd backend
python main.py

# 前端
cd src
npm run dev
```

2. 功能演示
- 日程创建
- 会议安排
- 智能对话
- 提醒设置

### 9. 项目总结
- 技术创新：大语言模型应用
- 实用价值：提升日程管理效率
- 扩展性：支持功能模块扩展
- 可维护性：清晰的代码结构

## 功能特点

- 日程管理：创建、修改、删除和查看日程
- 会议安排：支持安排各类会议，包括团队会议、项目会议、客户会议等
- 自然语言对话：支持日常对话和日程相关查询
- 提醒功能：支持设置会议提醒和活动提醒
- 智能助手：基于 Qwen2-1.8B 模型的智能对话系统

## 技术栈

### 后端
- Python 3.8+
- FastAPI
- MongoDB
- Qwen2-1.8B 模型
- Transformers
- Pydantic

### 前端
- React
- Material-UI
- TypeScript

## 安装步骤

### 1. 克隆项目
```bash
git clone [项目地址]
cd [项目目录]
```

### 2. 后端设置
```bash
# 进入后端目录
cd backend

# 创建虚拟环境
python -m venv venv

# 激活虚拟环境
# Windows
.\venv\Scripts\activate
# Linux/Mac
source venv/bin/activate

# 安装依赖
pip install -r requirements.txt

# 创建 .env 文件
echo "MONGODB_URL=mongodb+srv://Calendar:Com6104789@cluster0.4b3gld1.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0" > .env
```

### 3. 前端设置
```bash
# 进入前端目录
cd src

# 安装依赖
npm install
```

## 运行项目

### 1. 启动后端服务
```bash
# 在 backend 目录下
python main.py
```

### 2. 启动前端服务
```bash
# 在 src 目录下
npm run dev
```

## 使用说明

### 日程管理
- 创建日程：点击"添加新行程"按钮
- 修改日程：选择日程后点击"编辑选中行程"
- 删除日程：选择日程后点击"删除选中行程"
- 查看日程：在列表中查看所有日程

### 对话功能
- 基本对话：支持日常问候和简单对话
- 日程查询：可以询问特定日期的日程安排
- 会议安排：通过对话安排各类会议
- 提醒设置：设置会议和活动提醒

## 训练数据

训练数据位于 `backend/data/train.json`，包含：
- 日常对话场景
- 日程管理操作
- 会议安排和修改
- 提醒设置
- 日程查询

## 注意事项

1. 确保 MongoDB 连接正常
2. 确保 Hugging Face token 有效
3. 建议使用 GPU 进行模型训练
4. 首次运行需要下载模型，可能需要一些时间

## 开发团队

- 项目负责人：[姓名]
- 开发团队：[团队信息]

## 许可证

[许可证信息]



